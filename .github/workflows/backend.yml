# Gradle build.

name: Build server application

on: [push, pull_request]

jobs:

  cancel:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        with:
          all_but_latest: true
          access_token: ${{ github.token }}

  # Label of the container job
  build-and-upload-artifact:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: kontra
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt-openj9'
          java-version: 11

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build server side application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Fix me: change this gradle version to read from environment variable
          GRAILS_VERSION: 5.1.5
          JDBC_TEST_DATABASE_URL: jdbc:postgresql://localhost:5432/test
          JDBC_TEST_DATABASE_USERNAME: postgres
          JDBC_TEST_DATABASE_PASSWORD: kontra

        run: |
          cd server
          ./gradlew build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          # Artifact name
          name: server side application war file
          # Directory containing files to upload
          path: server/build/libs/*.war
